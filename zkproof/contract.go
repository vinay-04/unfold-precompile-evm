// Code generated
// This file is a generated precompile contract config with stubbed abstract functions.
// The file is generated by a template. Please inspect every code and comment in this file before use.

package zkproof

import (
	"errors"
	"fmt"
	"math/big"

	"github.com/ava-labs/subnet-evm/accounts/abi"
	"github.com/ava-labs/subnet-evm/precompile/contract"
	"github.com/ava-labs/subnet-evm/vmerrs"

	_ "embed"

	"github.com/ethereum/go-ethereum/common"
	"github.com/consensys/gnark/backend/groth16"
    "github.com/consensys/gnark/frontend"
)

const (
	// Gas costs for each function. These are set to 1 by default.
	// You should set a gas cost for each function in your contract.
	// Generally, you should not set gas costs very low as this may cause your network to be vulnerable to DoS attacks.
	// There are some predefined gas costs in contract/utils.go that you can use.
	GenerateProofGasCost uint64 = 1 /* SET A GAS COST HERE */
	VerifyProofGasCost   uint64 = 1 /* SET A GAS COST HERE */
)

// CUSTOM CODE STARTS HERE
// Reference imports to suppress errors from unused imports. This code and any unnecessary imports can be removed.
var (
	_ = abi.JSON
	_ = errors.New
	_ = big.NewInt
	_ = vmerrs.ErrOutOfGas
	_ = common.Big0
)

// Singleton StatefulPrecompiledContract and signatures.
var (

	// ZkproofRawABI contains the raw ABI of Zkproof contract.
	//go:embed contract.abi
	ZkproofRawABI string

	ZkproofABI = contract.ParseABI(ZkproofRawABI)

	ZkproofPrecompile = createZkproofPrecompile()
)

type VerifyProofInput struct {
	Input         []*big.Int
	Proof         []*big.Int
	PublicSignals []*big.Int
}

type Circuit struct {
    A frontend.Variable // Public input A
    B frontend.Variable // Public input B
    Out frontend.Variable // The result of A * B
}

func (circuit *Circuit) Define(curveID groth16.ID, cs *frontend.ConstraintSystem) error {
    // Define the constraint: A * B = Out
    cs.Mul(circuit.A, circuit.B, circuit.Out)

    return nil
}
// UnpackGenerateProofInput attempts to unpack [input] into the []*big.Int type argument
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackGenerateProofInput(input []byte) ([]*big.Int, error) {
	res, err := ZkproofABI.UnpackInput("generateProof", input)
	if err != nil {
		return nil, err
	}
	unpacked := *abi.ConvertType(res[0], new([]*big.Int)).(*[]*big.Int)
	return unpacked, nil
}

// PackGenerateProof packs [input] of type []*big.Int into the appropriate arguments for generateProof.
// the packed bytes include selector (first 4 func signature bytes).
// This function is mostly used for tests.
func PackGenerateProof(input []*big.Int) ([]byte, error) {
	return ZkproofABI.Pack("generateProof", input)
}

// PackGenerateProofOutput attempts to pack given proof of type []*big.Int
// to conform the ABI outputs.
func PackGenerateProofOutput(proof []*big.Int) ([]byte, error) {
	return ZkproofABI.PackOutput("generateProof", proof)
}

// UnpackGenerateProofOutput attempts to unpack given [output] into the []*big.Int type output
// assumes that [output] does not include selector (omits first 4 func signature bytes)
func UnpackGenerateProofOutput(output []byte) ([]*big.Int, error) {
	res, err := ZkproofABI.Unpack("generateProof", output)
	if err != nil {
		return nil, err
	}
	unpacked := *abi.ConvertType(res[0], new([]*big.Int)).(*[]*big.Int)
	return unpacked, nil
}

func generateProof(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
    if remainingGas, err = contract.DeductGas(suppliedGas, GenerateProofGasCost); err != nil {
        return nil, 0, err
    }
    if readOnly {
        return nil, remainingGas, vmerrs.ErrWriteProtection
    }

    // Define the zkSNARK circuit
    var circuit Circuit

    // Create a R1CS (Rank-1 Constraint System) for the circuit
    r1cs, err := frontend.Compile(groth16.NewCurveID(), &circuit)
    if err != nil {
        return nil, remainingGas, err
    }

    // Generate a proving key
    pk, _, err := groth16.Setup(r1cs)
    if err != nil {
        return nil, remainingGas, err
    }

    // Unpack the input data
    inputStruct, err := UnpackGenerateProofInput(input)
    if err != nil {
        return nil, remainingGas, err
    }

    // Create a witness with the input data
    var witness Circuit
    for i, v := range inputStruct.Input {
        witness.Secret.Assign(v)
        witness.Result.Assign(inputStruct.PublicSignals[i])
    }

    // Generate a zkSNARK proof
    proof, err := groth16.Prove(r1cs, pk, &witness)
    if err != nil {
        return nil, remainingGas, err
    }

    // Pack the proof for output
    packedProof, err := PackGenerateProofOutput(proof)
    if err != nil {
        return nil, remainingGas, err
    }

    return packedProof, remainingGas, nil
}

// UnpackVerifyProofInput attempts to unpack [input] as VerifyProofInput
// assumes that [input] does not include selector (omits first 4 func signature bytes)
func UnpackVerifyProofInput(input []byte) (VerifyProofInput, error) {
	inputStruct := VerifyProofInput{}
	err := ZkproofABI.UnpackInputIntoInterface(&inputStruct, "verifyProof", input)

	return inputStruct, err
}

// PackVerifyProof packs [inputStruct] of type VerifyProofInput into the appropriate arguments for verifyProof.
func PackVerifyProof(inputStruct VerifyProofInput) ([]byte, error) {
	return ZkproofABI.Pack("verifyProof", inputStruct.Input, inputStruct.Proof, inputStruct.PublicSignals)
}

// PackVerifyProofOutput attempts to pack given success of type bool
// to conform the ABI outputs.
func PackVerifyProofOutput(success bool) ([]byte, error) {
	return ZkproofABI.PackOutput("verifyProof", success)
}

// UnpackVerifyProofOutput attempts to unpack given [output] into the bool type output
// assumes that [output] does not include selector (omits first 4 func signature bytes)
func UnpackVerifyProofOutput(output []byte) (bool, error) {
	res, err := ZkproofABI.Unpack("verifyProof", output)
	if err != nil {
		return false, err
	}
	unpacked := *abi.ConvertType(res[0], new(bool)).(*bool)
	return unpacked, nil
}

func verifyProof(accessibleState contract.AccessibleState, caller common.Address, addr common.Address, input []byte, suppliedGas uint64, readOnly bool) (ret []byte, remainingGas uint64, err error) {
    if remainingGas, err = contract.DeductGas(suppliedGas, VerifyProofGasCost); err != nil {
        return nil, 0, err
    }

    // Define the zkSNARK circuit
    var circuit Circuit

    // Create a R1CS (Rank-1 Constraint System) for the circuit
    r1cs, err := frontend.Compile(groth16.NewCurveID(), &circuit)
    if err != nil {
        return nil, remainingGas, err
    }

    // Generate a proving key and a verification key
    pk, vk, err := groth16.Setup(r1cs)
    if err != nil {
        return nil, remainingGas, err
    }

    // Unpack the input data
    inputStruct, err := UnpackVerifyProofInput(input)
    if err != nil {
        return nil, remainingGas, err
    }

    // Create a witness with the input data
    var witness Circuit
    for i, v := range inputStruct.Input {
        witness.Secret.Assign(v)
        witness.Result.Assign(inputStruct.PublicSignals[i])
    }

    // Verify the zkSNARK proof using the verification key
    err = groth16.Verify(inputStruct.Proof, vk, &witness)
    if err != nil {
        return nil, remainingGas, err
    }

    return nil, remainingGas, nil
}

// createZkproofPrecompile returns a StatefulPrecompiledContract with getters and setters for the precompile.

func createZkproofPrecompile() contract.StatefulPrecompiledContract {
	var functions []*contract.StatefulPrecompileFunction

	abiFunctionMap := map[string]contract.RunStatefulPrecompileFunc{
		"generateProof": generateProof,
		"verifyProof":   verifyProof,
	}

	for name, function := range abiFunctionMap {
		method, ok := ZkproofABI.Methods[name]
		if !ok {
			panic(fmt.Errorf("given method (%s) does not exist in the ABI", name))
		}
		functions = append(functions, contract.NewStatefulPrecompileFunction(method.ID, function))
	}
	// Construct the contract with no fallback function.
	statefulContract, err := contract.NewStatefulPrecompileContract(nil, functions)
	if err != nil {
		panic(err)
	}
	return statefulContract
}
